{"pages":[{"title":"","text":"🎈🎈微笑墙🎈🎈 彭小苒 唐艺昕 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"个人简介 分享很喜欢的老罗的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.09.20：icarus4.0适配–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '46a9f3481b46ea0129d8', clientSecret: '79c7c9cb847e141757d7864453bcbf89f0655b24', id: '666666', repo: 'issue_database', owner: 'removeif', admin: \"removeif\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"}],"posts":[{"title":"你好世界！","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post1&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Quick Start2Create a new post1$ hexo new &quot;My New Post1&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy Deploy to remote sites1123456789101112131415161718192021222324$ hexo deploy``` #### Deploy to remote sites2``` bash$ hexo deploy``` #### Deploy to remote sites3``` bash$ hexo deploy``` More info: [Deployment](https://hexo.io/docs/one-command-deployment.html)## Quick Start3### Create a new post``` bash$ hexo new &quot;My New Post1&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Quick Start3Create a new post1$ hexo new &quot;My New Post1&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Quick Start3Create a new post1$ hexo new &quot;My New Post1&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Quick Start3Create a new post1$ hexo new &quot;My New Post1&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C.html"},{"title":"Java部署","text":"123456789101112131415FROM openjdk:8-jdkLABEL maintainer=leifengyang# docker run -e PARAMS=&quot;--server.port 9090&quot;ENV PARAMS=&quot;--server.port=8080 --spring.profiles.active=prod --spring.cloud.nacos.discovery.server-addr=ry-nacos.ry:8848 --spring.cloud.nacos.config.server-addr=ry-nacos.ry:8848 --spring.cloud.nacos.config.namespace=prod --spring.cloud.nacos.config.file-extension=yml&quot;RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo 'Asia/Shanghai' &gt;/etc/timezoneCOPY target/*.jar /app.jarEXPOSE 8080#ENTRYPOINT [&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;java -Dfile.encoding=utf8 -Djava.security.egd=file:/dev/./urandom -jar app.jar ${PARAMS}&quot;] 规则： 1、容器默认以8080端口启动 2、时间为CST 3、环境变量 PARAMS 可以动态指定配置文件中任意的值 4、nacos集群内地址为 his-nacos.his:8848 ,nacos 2.0以上版本需要开启多个端口,保证 8848 9848 9849 这几个端口能正常访问,这样就可以通过集群内环境实现 5、微服务默认启动加载 nacos中 服务名-激活的环境.yml 文件，所以线上的配置可以全部写在nacos中。","link":"/Docker/003.Docker%20%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/06.Java%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2.html"},{"title":"MySQL部署","text":"1 MySQL部署1.1案例：需求 在Docker 容器中部署MySQL，并通过外部MySQL 客户端操作MySQL Server 1.2 案例：实现 搜索mysql镜像 拉取mysql镜像 创建容器 操作容器中的mysql 1.3 问题及解决方案 容器内的网络服务和外部机器不能直接通信 外部机器和宿主机可以直接通信 宿主机和容器可以直接通信 当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机器访问宿主机的端口，从而间接访问容器的服务 这种操作称为：端口映射 1.4 部署MySQL 搜索mysql镜像 1docker search mysql 拉取mysql镜像 1docker pull mysql:5.6 创建容器，设置端口映射、目录映射 123# 在/root目录下创建mysql目录用于存储mysql数据信息mkdir ~/mysqlcd ~/mysql 12345678docker run -id \\-p 3306:3306 \\--name=mysql \\-v $PWD/conf:/etc/mysql/conf.d \\-v $PWD/logs:/logs \\-v $PWD/data:/var/lib/mysql \\-e MYSQL_ROOT_PASSWORD=123456 \\mysql 参数说明 -p 3307:3306：将容器的3306端口映射到宿主机的3307端口 --v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的conf/my.cnf挂载到容器/etc/mysql/my.cnf配置目录 -v $PWD/logs:/logs：将主机当前目录下的logs目录挂载到容器的/logs目录日志 -v $PWD/data:/var/lib/mysql：将主机当前目录下的data目录挂载到容器的/var/lib/mysql数据目录 -e MYSQL_ROOT_PASSWORD=123456：初始化root 用户密码 使用外部机器访问MySQL","link":"/Docker/003.Docker%20%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1.MySQL%E9%83%A8%E7%BD%B2.html"},{"title":"Tomcat部署","text":"2.Tomcat部署 搜索Tomcat 镜像 1docker search tomcat 拉取mysql镜像 1docker pull tomcat 创建容器，设置端口映射、目录映射 123#在/root目录下创建tomcat目录用于存放tomcat数据信息mkdir ~/tomcatcd ~/tomcat 1234docker run -id --name=c_tomcat \\-p 8080:8080 \\-v $PWD:/usr/local/tomcat/webapps \\tomcat 参数说明： -p 8080:8080：将容器的8080端口映射到主机的8080端口 -v $PWD:/usr/local/tomcat/webapps：将主机中当前目录挂载到容器的webapps 最后使用外部机器访问tomcat","link":"/Docker/003.Docker%20%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/2.Tomcat%E9%83%A8%E7%BD%B2.html"},{"title":"Nginx部署","text":"3.Nginx部署 搜索Nginx 镜像 1docker search nginx 拉取mysql镜像 1docker pull nginx 创建容器，设置端口映射、目录映射 1234567#在/root目录下创建nginx目录用于存储nginx数据信息mkdir ~/nginxcd ~/nginxmkdir confcd conf#在~/nginx/conf/下创建nginx.conf文件，粘贴下面代码块的内容vim nginx.conf 1234567891011121314151617181920212223242526272829user nginx;worker_processes 1;error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid;events { worker_connections 1024;}http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; include /etc/nginx/conf.d/*.conf;} 123456docker -run -id --name=c_nginx \\-p 80:800 \\-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \\-v $PWD/logs:/var/log/nginx \\-v $PWD/html:/usr/share/nginx/html \\nginx 参数说明： -p 80:800：将容器的80端口映射到宿主机的80端口 -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机当前目录下的/conf/nginx.conf挂载到容器的:/etc/nginx/nginx.conf配置目录 -v $PWD/html:/usr/share/nginx/html：将主机当前目录挂载到容器的/val/log/nginx日志目录 使用外部机器访问nginx","link":"/Docker/003.Docker%20%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/3.Nginx%E9%83%A8%E7%BD%B2.html"},{"title":"MySQL部署","text":"下载镜像 1docker pull nacos/nacos-server:v2.1.1 创建容器，设置端口映射、目录映射123456789docker run --name nacos-quick -d \\-v /www/tools/nacos/conf:/home/nacos/init.d \\-p 8848:8848 -p 9848:9848 -p 9849:9849 \\-e MODE=standalone -e MYSQL_SERVICE_HOST=47.99.69.207 -e MYSQL_SERVICE_DB_NAME=ry-config \\-e MYSQL_SERVICE_USER=root -e MYSQL_SERVICE_PASSWORD=qwe123456 \\-e SPRING_DATASOURCE_PLATFORM=mysql \\nacos/nacos-server:v2.1.1","link":"/Docker/003.Docker%20%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/5.%20Nacos%20%E9%83%A8%E7%BD%B2.html"},{"title":"Redis部署","text":"Redis部署 搜索Redis 镜像 1docker search redis 拉取Redis 镜像 1docker pull redis:5.0 创建容器，设置端口映射、目录映射 1docker run -id --name=c_redis -p 6379:6379 redis:5.0 使用外部机器连接redis 1redis-cli.exe -h 192.168.187.129 -p 6379 复杂安装Redis 获取Redis版本 拉取Redis 以上这条命令是拉取最新版本的redis，如果想拉取对应版本使用 创建挂载目录即配置文件 12mkdir -p /www/tools/redis/data /home/tools/redis/conf touch /www/tools/redis/data /home/tools/redis/conf/redis.conf 修改配置文件 1vi /home/tools/redis/conf/redis.conf 添加如下内容 1234#bind 127.0.0.1 daemonize no protected-mode no requirepass 123456 运行容器 123docker run -d --name redis -p 16379:6379 \\-v /home/tools/redis/conf/redis.conf:/redis.conf \\-v /home/tools/redis/data:/data redis:5.0.8 redis-server --appendonly yes 查看 1docker ps","link":"/Docker/003.Docker%20%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/4.Redis%E9%83%A8%E7%BD%B2.html"}],"tags":[{"name":"Getting Started","slug":"Getting-Started","link":"/tags/Getting-Started/"},{"name":"Icarus User Guide","slug":"Icarus-User-Guide","link":"/tags/Icarus-User-Guide/"}],"categories":[{"name":"Plugins","slug":"Plugins","link":"/categories/Plugins/"},{"name":"Comment","slug":"Plugins/Comment","link":"/categories/Plugins/Comment/"},{"name":"003.Docker 应用部署","slug":"003-Docker-应用部署","link":"/categories/003-Docker-%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"},{"name":"Docker","slug":"003-Docker-应用部署/Docker","link":"/categories/003-Docker-%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/Docker/"},{"name":"Docker","slug":"003-Docker-应用部署/Docker/Docker","link":"/categories/003-Docker-%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/Docker/Docker/"},{"name":"003.Docker 应用部署","slug":"003-Docker-应用部署/Docker/Docker/003-Docker-应用部署","link":"/categories/003-Docker-%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/Docker/Docker/003-Docker-%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"}]}